#!/bin/sh

# 上传
upload() {
	# 压缩上传部署
	cp -f app.json publish/
	mv publish hc_client
	zip -ry hc_client.zip hc_client

	if [[ $1 = "pingshen" ]];then
		scp -P50050 hc_client.zip root@101.227.80.116:/opt/www/hc/
		#不覆盖已有的app.json
		ssh root@101.227.80.116 -p 50050 'cd /opt/www/hc/; cp -f hc_client/app.json ./; rm -rf hc_client; unzip hc_client.zip; mv -f app.json hc_client/; rm -f hc_client.zip;'
		rm -f hc_client.zip
		rm -rf hc_client
		echo "<a class='btn btn-small btn-info' href='http://gc.hgame.com/home/game/appid/100021/gameid/100263/review/6'>点我去测试</a>"
	else 
		scp -P50044 hc_client.zip root@101.227.80.115:/opt/www/hc/
		ssh root@101.227.80.115 -p 50044 'cd /opt/www/hc/; rm -rf hc_client; unzip hc_client.zip; mv -f hc_client.zip ../hc_release/;'
		rm -f hc_client.zip
		rm -rf hc_client
		echo "<a class='btn btn-small btn-info' href='http://gc.hgame.com/home/game/appid/100021/gameid/100263/review/2'>点我去测试</a>"
	fi;
}
# 添加一个分支
clonebranch() {
	echo 拷贝一个新分支到工作目录，可能花一点时间
	cd $maindir
	git fetch -a
	git checkout ./
	git checkout -t "origin/$1";
	git checkout develop
	cd ..
	git clone -lvb $1 $maindir $1
	cd ./$1
	git config remote.origin.url git@gitlab.hd.com:flower/client.git
	git config push.default simple
	git pull
}

#更新api
upapi() {
	cd $apidir
	#有对应api分支的，拉取对应分支的api,没有就用develop分支的api
	if [[ "${branchapis[@]}" =~ "$1" ]]; then
		git checkout -f "$1"
	else
		git checkout -f develop
	fi
	git pull
	cd $apigen
	java -cp ApiGen.jar ApiGen -f ../flowerTool/api/main.api -t ./template -g ts -o ./
  	cp ./ts/api.ts "${maindir}/src/app/data/"
  	cp ../flowerTool/datats/loader.ts "${maindir}/src/app/data/"
  	cp ../flowerTool/datats/data.ts "${maindir}/src/app/data/data.tsc"
  	rm -r ts
	

	# 切回发版目录
	cd $maindir
	cd ../$1
	git commit -am "api & data"
	git pull -q
	git push
}

# 发远程版本
dist() {
	cd $maindir
	./n2build service stop
	cd ../$1
	git checkout ./
	git pull -q

	echo "开始编译$1 发行版 ，大约需要10分钟..."
	# 替换默认分隔符，以保证打印时换行的正常处理
	ifs=$IFS; 
	IFS="\~~"; 

	cfg=`cat .n2.cfg`
	vstr=`cat .n2.cfg | grep "version"`
	curVer=$2

	# 提交版本号	
	echo ${cfg/$vstr/"version = $curVer"} > .n2.cfg
	git add .n2.cfg
	git commit -m "update_version_to:$curVer"
	git push
	# 分隔符回置
	IFS=ifs

	#更新api功能暂停
	# upapi $1

	# 编译打包
	./n2build dist

	if [[ $? -ne 0 ]]; then
		#打包出错
		echo "发版出错了！！！"
		/n2build service stop
		return;
	else
		/n2build service stop
		upload $1
	fi

	
}

# 发本地版本
localPub() {
 	echo 更新主目录代码...
	#切回发版目录
 	cd $maindir
	./n2build service stop
	cd ../$1
	git checkout ./
	git pull -q

	#更新api功能暂停
	# upapi $1

	echo 开始更新本地版本，大约1分钟....
	./n2build
	if [[ $? -eq 0 ]]; then
		echo "<a class='btn btn-small btn-info' href='${weburl}$1'>点我去测试</a>"
	fi
	./n2build service stop
}

clean(){
	cd $maindir
	git branch -D $1
	cd ..
	if [[ -d "./$1"  ]]; then
		rm -rf ./$1;
		echo 本地分支$1 清除完成
	else
		echo 目标分支的目录不存在
	fi
}


# ------------------------程序入口--------------------------------
# 有对应api的分支
branchapis=["develop","hotfix","pingshen"]
# 前三个参数为目录
maindir=$1;
apidir=$2;
apigen=$3;
weburl=$4;
cd $maindir

if [[ $5 = "listbranch" ]]; then
	git pull -q
	git branch -a;
elif [[ $5 = "create" ]]; then
	clonebranch $6
elif [[ $5 = "pub" ]]; then
	if [[ -d "../$6" ]]; then
		localPub $6;
	else
		clonebranch $6
		localPub $6;
	fi
elif [[ $5 = "distversion" ]]; then
	vstr=`cat .n2.cfg | grep "version"`
	echo ${vstr##*=}
elif [[ $5 = "dist" ]]; then
	if [[ -d "../$6" ]]; then
		dist $6 $7;
	else
		clonebranch $6
		dist $6 $7
	fi
elif [[ $5 = "clean" ]]; then
	clean $6;
elif [[ $5 = "logcode" ]]; then
	cd ../$6
	git pull -q
	git log --since=1.days --pretty=format:"%h - %an, %ar : %s"
fi




